#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('EventPlanner:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * SSL certificates.
 */

const sslkey = fs.readFileSync('ssl-key.pem');
const sslcert = fs.readFileSync('ssl-cert.pem')

/**
 * HTTPs server certificate options.
 */

const options = {
    key: sslkey,
    cert: sslcert,
};


/**
 * Get port from environment and store in Express.
 */

const httpPort = normalizePort(process.env.HTTP_PORT || '3000');
const httpsPort = normalizePort(process.env.HTTPS_PORT || '8000');
app.set('port', httpsPort);

/**
 * Create HTTP server which only redirects to https.
 */

const httpServer = http.createServer((req, res) => {
    res.writeHead(301, {
        'Location': 'https://localhost:8000' + req.url
    });
    res.end();
});

/**
 * Create HTTPS server.
 */

const httpsServer = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof httpsPort === 'string' ?
        'Pipe ' + httpsPort :
        'Port ' + httpsPort

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = httpsServer.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}